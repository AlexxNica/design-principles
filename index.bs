<pre class="metadata">
Title: API Design Principles
Group: W3C TAG
Shortname: design-principles
Status: DREAM
Editor: Domenic Denicola, Google https://www.google.com/, https://domenic.me/, d@domenic.me
ED: https://w3ctag.github.io/design-principles
Abstract: This document contains a small-but-growing set of design principles collected by the W3C TAG while <a href="https://github.com/w3ctag/spec-reviews/">reviewing</a> specifications.
Default Biblio Status: current
!Participate: <a href="https://github.com/w3ctag/design-principles">GitHub w3ctag/design-principles</a> (<a href="https://github.com/w3ctag/design-principles/issues/new">file an issue</a>; <a href="https://github.com/w3ctag/design-principles/issues?state=open">open issues</a>)

Link Defaults: html (dfn) queue a task/in parallel
</pre>

<h2 id="js">JavaScript Language</h2>

<h3 id="js-only">Web APIs are for JavaScript</h3>

The language that web APIs are meant to be used in, and specified for, is JavaScript (also known as ECMAScript). They are not language-agnostic, and are not meant to be.

This is sometimes a confusing point because [[WEBIDL]] descended from the language-agnostic OMG IDL. Even today, the structure of the document contains a confusing and redundant division between the "Interface definition language" and the "ECMAScript binding". Rest assured that this division is simply a historical artifact of document structure, and does not imply anything about the intent of Web IDL in general. The only reason it remains is that nobody has taken the time to eradicate it.

As such, when designing your APIs, your primary concern should be with the interface you present to JavaScript authors. You can freely rely upon language-specific semantics and conventions, with no need to keep things generalized.

<h3 id="js-rtc">Preserve run-to-completion semantics</h3>

Web APIs are essentially vehicles for extruding C++-authored capabilities into the JavaScript code that authors write. As such, it's important to respect the invariants that are in play in normal JavaScript code. One of the most important of these is <em>run-to-completion semantics</em>, wherein each turn of the JavaScript event loop is processed completely before returning control to the user agent.

In particular, this means that JavaScript functions cannot be preempted mid-execution, and thus that any data observed within the function will stay constant as long as that function is active. This is not the case in other languages, which allow data races via multithreading or other techniques—a C function can be preempted at any time, with its local variables changing values from one line to the next.

This no-data-races invariant is relied upon extensively in JavaScript programs, and must never be violated—even by web APIs, which are often implemented in languages that <em>do</em> allow data races. Although the user agent may be using threads or other techniques to modify state <a>in parallel</a>, web APIs must never expose such changing state directly to authors. Instead, they should <a>queue a task</a> to modify author-observable state (such as an object property).

<h3 id="js-gc">Do not expose garbage collection</h3>

There must not be a way for author code to tell when/if garbage collection of JavaScript objects has run.

The reason for this is somewhat subtle. If garbage collection timing were observable, then authors could easily write code relying on specific garbage collection timing. But this timing is almost certainly not the same across user agents, which means the resulting code will be non-interoperable. Worse, according to the usual rules of browser game theory, this kind of scenario could force other user agents to copy the garbage collection timing of the original, in order to create interoperability. This would cause our current garbage collection strategies to ossify, preventing improvement in one of the most dynamic areas of JavaScript virtual machine technology.

In particular, this means that you can't expose any API that acts as a weak reference, e.g. with a property that becomes <code>null</code> once garbage collection runs. Such freeing of memory must be entirely deterministic.

<div class="note">
    There is some speculative discussion of exposing weak references such that their finalization is only observable between event loop turns (see <a href="http://wiki.ecmascript.org/doku.php?id=strawman:weak_references">strawman:weak_references</a> and <a href="http://wiki.ecmascript.org/doku.php?id=strawman:weak_refs">strawman:weak_refs</a>). However, these proposals have no active champions, and nobody knows if they are feasible or even desirable.
</div>

<h2 id="types-and-units">Types and Units</h2>

<h3 id="numeric-types">Use numeric types appropriately</h3>

Web IDL, because of its OMG IDL heritage, has a plethora of numeric types. However, it is very rare that its more specific ones are actually appropriate.

Remember that JavaScript itself only has one numeric type, Number: IEEE 754 double-precision floating point, including ±0, ±Infinity, and NaN (although thankfully only one). The Web IDL "types" are simply conversion rules that apply when accepting an argument or triggering a setter. For example, a Web IDL <code>unsigned short</code> roughly says: "when someone passes this as an argument, take it modulo 65535 before doing any further processing". That is very rarely a useful thing to do.

Instead, you probably want to stick with one of:

<ul>
    <li><code>unrestricted double</code>: when truly any JavaScript number will do, including infinities and NaN
    <li><code>double</code>: any JavaScript number excluding infinities and NaN
    <li><code>[EnforceRange] long long</code>: any JavaScript number in the integer-representable range, throwing a <code>TypeError</code> otherwise
    <li><code>[EnforceRange] unsigned long long</code>: any nonnegative JavaScript number in the integer-representable range, throwing a <code>TypeError</code> otherwise
</ul>

Additionally, you can combine any of the above with an extra line in your algorithm to validate that the number is within the expected domain-specific range, and throwing or performing other actions in response. (While it is very rarely appropriate to modify author input by taking it modulo 65535, it might be appropriate to take it modulo 360, for example.)

<div class="note">
    Those coming from other languages should carefully note that despite their names, <code>long long</code> and <code>unsigned long long</code> only have 53 bits of precision, and not 64.
</div>

<h3 id="milliseconds">Use milliseconds for time measurement</h3>

Any web API that accepts a time measurement should do so in milliseconds. This is a tradition stemming from <code>setTimeout</code> and the <code>Date</code> API, and carried through since then.

Even if seconds (or some other unit) are more natural in the domain of an API, sticking with milliseconds ensures interoperability with the rest of the platform, allowing easy arithmetic with other time quantities.

Note that high-resolution time is usually represented as fractional milliseconds, not e.g. as nanoseconds.
